// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package metric_stream

import (
	"context"
	"errors"
	"fmt"
	"reflect"
	"strings"

	ackv1alpha1 "github.com/aws-controllers-k8s/runtime/apis/core/v1alpha1"
	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	ackcondition "github.com/aws-controllers-k8s/runtime/pkg/condition"
	ackerr "github.com/aws-controllers-k8s/runtime/pkg/errors"
	ackrequeue "github.com/aws-controllers-k8s/runtime/pkg/requeue"
	ackrtlog "github.com/aws-controllers-k8s/runtime/pkg/runtime/log"
	"github.com/aws/aws-sdk-go-v2/aws"
	svcsdk "github.com/aws/aws-sdk-go-v2/service/cloudwatch"
	svcsdktypes "github.com/aws/aws-sdk-go-v2/service/cloudwatch/types"
	smithy "github.com/aws/smithy-go"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/aws-controllers-k8s/cloudwatch-controller/apis/v1alpha1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
	_ = strings.ToLower("")
	_ = &svcsdk.Client{}
	_ = &svcapitypes.MetricStream{}
	_ = ackv1alpha1.AWSAccountID("")
	_ = &ackerr.NotFound
	_ = &ackcondition.NotManagedMessage
	_ = &reflect.Value{}
	_ = fmt.Sprintf("")
	_ = &ackrequeue.NoRequeue{}
	_ = &aws.Config{}
)

// sdkFind returns SDK-specific information about a supplied resource
func (rm *resourceManager) sdkFind(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkFind")
	defer func() {
		exit(err)
	}()
	// If any required fields in the input shape are missing, AWS resource is
	// not created yet. Return NotFound here to indicate to callers that the
	// resource isn't yet created.
	if rm.requiredFieldsMissingFromReadOneInput(r) {
		return nil, ackerr.NotFound
	}

	input, err := rm.newDescribeRequestPayload(r)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.GetMetricStreamOutput
	resp, err = rm.sdkapi.GetMetricStream(ctx, input)
	rm.metrics.RecordAPICall("READ_ONE", "GetMetricStream", err)
	if err != nil {
		var awsErr smithy.APIError
		if errors.As(err, &awsErr) && awsErr.ErrorCode() == "ResourceNotFoundException" {
			return nil, ackerr.NotFound
		}
		return nil, err
	}

	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := r.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}
	if resp.ExcludeFilters != nil {
		f2 := []*svcapitypes.MetricStreamFilter{}
		for _, f2iter := range resp.ExcludeFilters {
			f2elem := &svcapitypes.MetricStreamFilter{}
			if f2iter.MetricNames != nil {
				f2elem.MetricNames = aws.StringSlice(f2iter.MetricNames)
			}
			if f2iter.Namespace != nil {
				f2elem.Namespace = f2iter.Namespace
			}
			f2 = append(f2, f2elem)
		}
		ko.Spec.ExcludeFilters = f2
	} else {
		ko.Spec.ExcludeFilters = nil
	}
	if resp.FirehoseArn != nil {
		ko.Spec.FirehoseARN = resp.FirehoseArn
	} else {
		ko.Spec.FirehoseARN = nil
	}
	if resp.IncludeFilters != nil {
		f4 := []*svcapitypes.MetricStreamFilter{}
		for _, f4iter := range resp.IncludeFilters {
			f4elem := &svcapitypes.MetricStreamFilter{}
			if f4iter.MetricNames != nil {
				f4elem.MetricNames = aws.StringSlice(f4iter.MetricNames)
			}
			if f4iter.Namespace != nil {
				f4elem.Namespace = f4iter.Namespace
			}
			f4 = append(f4, f4elem)
		}
		ko.Spec.IncludeFilters = f4
	} else {
		ko.Spec.IncludeFilters = nil
	}
	if resp.IncludeLinkedAccountsMetrics != nil {
		ko.Spec.IncludeLinkedAccountsMetrics = resp.IncludeLinkedAccountsMetrics
	} else {
		ko.Spec.IncludeLinkedAccountsMetrics = nil
	}
	if resp.Name != nil {
		ko.Spec.Name = resp.Name
	} else {
		ko.Spec.Name = nil
	}
	if resp.OutputFormat != "" {
		ko.Spec.OutputFormat = aws.String(string(resp.OutputFormat))
	} else {
		ko.Spec.OutputFormat = nil
	}
	if resp.RoleArn != nil {
		ko.Spec.RoleARN = resp.RoleArn
	} else {
		ko.Spec.RoleARN = nil
	}
	if resp.StatisticsConfigurations != nil {
		f11 := []*svcapitypes.MetricStreamStatisticsConfiguration{}
		for _, f11iter := range resp.StatisticsConfigurations {
			f11elem := &svcapitypes.MetricStreamStatisticsConfiguration{}
			if f11iter.AdditionalStatistics != nil {
				f11elem.AdditionalStatistics = aws.StringSlice(f11iter.AdditionalStatistics)
			}
			if f11iter.IncludeMetrics != nil {
				f11elemf1 := []*svcapitypes.MetricStreamStatisticsMetric{}
				for _, f11elemf1iter := range f11iter.IncludeMetrics {
					f11elemf1elem := &svcapitypes.MetricStreamStatisticsMetric{}
					if f11elemf1iter.MetricName != nil {
						f11elemf1elem.MetricName = f11elemf1iter.MetricName
					}
					if f11elemf1iter.Namespace != nil {
						f11elemf1elem.Namespace = f11elemf1iter.Namespace
					}
					f11elemf1 = append(f11elemf1, f11elemf1elem)
				}
				f11elem.IncludeMetrics = f11elemf1
			}
			f11 = append(f11, f11elem)
		}
		ko.Spec.StatisticsConfigurations = f11
	} else {
		ko.Spec.StatisticsConfigurations = nil
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// requiredFieldsMissingFromReadOneInput returns true if there are any fields
// for the ReadOne Input shape that are required but not present in the
// resource's Spec or Status
func (rm *resourceManager) requiredFieldsMissingFromReadOneInput(
	r *resource,
) bool {
	return r.ko.Spec.Name == nil

}

// newDescribeRequestPayload returns SDK-specific struct for the HTTP request
// payload of the Describe API call for the resource
func (rm *resourceManager) newDescribeRequestPayload(
	r *resource,
) (*svcsdk.GetMetricStreamInput, error) {
	res := &svcsdk.GetMetricStreamInput{}

	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}

	return res, nil
}

// sdkCreate creates the supplied resource in the backend AWS service API and
// returns a copy of the resource with resource fields (in both Spec and
// Status) filled in with values from the CREATE API operation's Output shape.
func (rm *resourceManager) sdkCreate(
	ctx context.Context,
	desired *resource,
) (created *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkCreate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newCreateRequestPayload(ctx, desired)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.PutMetricStreamOutput
	_ = resp
	resp, err = rm.sdkapi.PutMetricStream(ctx, input)
	rm.metrics.RecordAPICall("CREATE", "PutMetricStream", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newCreateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Create API call for the resource
func (rm *resourceManager) newCreateRequestPayload(
	ctx context.Context,
	r *resource,
) (*svcsdk.PutMetricStreamInput, error) {
	res := &svcsdk.PutMetricStreamInput{}

	if r.ko.Spec.ExcludeFilters != nil {
		f0 := []svcsdktypes.MetricStreamFilter{}
		for _, f0iter := range r.ko.Spec.ExcludeFilters {
			f0elem := &svcsdktypes.MetricStreamFilter{}
			if f0iter.MetricNames != nil {
				f0elem.MetricNames = aws.ToStringSlice(f0iter.MetricNames)
			}
			if f0iter.Namespace != nil {
				f0elem.Namespace = f0iter.Namespace
			}
			f0 = append(f0, *f0elem)
		}
		res.ExcludeFilters = f0
	}
	if r.ko.Spec.FirehoseARN != nil {
		res.FirehoseArn = r.ko.Spec.FirehoseARN
	}
	if r.ko.Spec.IncludeFilters != nil {
		f2 := []svcsdktypes.MetricStreamFilter{}
		for _, f2iter := range r.ko.Spec.IncludeFilters {
			f2elem := &svcsdktypes.MetricStreamFilter{}
			if f2iter.MetricNames != nil {
				f2elem.MetricNames = aws.ToStringSlice(f2iter.MetricNames)
			}
			if f2iter.Namespace != nil {
				f2elem.Namespace = f2iter.Namespace
			}
			f2 = append(f2, *f2elem)
		}
		res.IncludeFilters = f2
	}
	if r.ko.Spec.IncludeLinkedAccountsMetrics != nil {
		res.IncludeLinkedAccountsMetrics = r.ko.Spec.IncludeLinkedAccountsMetrics
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.OutputFormat != nil {
		res.OutputFormat = svcsdktypes.MetricStreamOutputFormat(*r.ko.Spec.OutputFormat)
	}
	if r.ko.Spec.RoleARN != nil {
		res.RoleArn = r.ko.Spec.RoleARN
	}
	if r.ko.Spec.StatisticsConfigurations != nil {
		f7 := []svcsdktypes.MetricStreamStatisticsConfiguration{}
		for _, f7iter := range r.ko.Spec.StatisticsConfigurations {
			f7elem := &svcsdktypes.MetricStreamStatisticsConfiguration{}
			if f7iter.AdditionalStatistics != nil {
				f7elem.AdditionalStatistics = aws.ToStringSlice(f7iter.AdditionalStatistics)
			}
			if f7iter.IncludeMetrics != nil {
				f7elemf1 := []svcsdktypes.MetricStreamStatisticsMetric{}
				for _, f7elemf1iter := range f7iter.IncludeMetrics {
					f7elemf1elem := &svcsdktypes.MetricStreamStatisticsMetric{}
					if f7elemf1iter.MetricName != nil {
						f7elemf1elem.MetricName = f7elemf1iter.MetricName
					}
					if f7elemf1iter.Namespace != nil {
						f7elemf1elem.Namespace = f7elemf1iter.Namespace
					}
					f7elemf1 = append(f7elemf1, *f7elemf1elem)
				}
				f7elem.IncludeMetrics = f7elemf1
			}
			f7 = append(f7, *f7elem)
		}
		res.StatisticsConfigurations = f7
	}
	if r.ko.Spec.Tags != nil {
		f8 := []svcsdktypes.Tag{}
		for _, f8iter := range r.ko.Spec.Tags {
			f8elem := &svcsdktypes.Tag{}
			if f8iter.Key != nil {
				f8elem.Key = f8iter.Key
			}
			if f8iter.Value != nil {
				f8elem.Value = f8iter.Value
			}
			f8 = append(f8, *f8elem)
		}
		res.Tags = f8
	}

	return res, nil
}

// sdkUpdate patches the supplied resource in the backend AWS service API and
// returns a new resource with updated fields.
func (rm *resourceManager) sdkUpdate(
	ctx context.Context,
	desired *resource,
	latest *resource,
	delta *ackcompare.Delta,
) (updated *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkUpdate")
	defer func() {
		exit(err)
	}()
	input, err := rm.newUpdateRequestPayload(ctx, desired, delta)
	if err != nil {
		return nil, err
	}

	var resp *svcsdk.PutMetricStreamOutput
	_ = resp
	resp, err = rm.sdkapi.PutMetricStream(ctx, input)
	rm.metrics.RecordAPICall("UPDATE", "PutMetricStream", err)
	if err != nil {
		return nil, err
	}
	// Merge in the information we read from the API call above to the copy of
	// the original Kubernetes object we passed to the function
	ko := desired.ko.DeepCopy()

	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if resp.Arn != nil {
		arn := ackv1alpha1.AWSResourceName(*resp.Arn)
		ko.Status.ACKResourceMetadata.ARN = &arn
	}

	rm.setStatusDefaults(ko)
	return &resource{ko}, nil
}

// newUpdateRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Update API call for the resource
func (rm *resourceManager) newUpdateRequestPayload(
	ctx context.Context,
	r *resource,
	delta *ackcompare.Delta,
) (*svcsdk.PutMetricStreamInput, error) {
	res := &svcsdk.PutMetricStreamInput{}

	if r.ko.Spec.ExcludeFilters != nil {
		f0 := []svcsdktypes.MetricStreamFilter{}
		for _, f0iter := range r.ko.Spec.ExcludeFilters {
			f0elem := &svcsdktypes.MetricStreamFilter{}
			if f0iter.MetricNames != nil {
				f0elem.MetricNames = aws.ToStringSlice(f0iter.MetricNames)
			}
			if f0iter.Namespace != nil {
				f0elem.Namespace = f0iter.Namespace
			}
			f0 = append(f0, *f0elem)
		}
		res.ExcludeFilters = f0
	}
	if r.ko.Spec.FirehoseARN != nil {
		res.FirehoseArn = r.ko.Spec.FirehoseARN
	}
	if r.ko.Spec.IncludeFilters != nil {
		f2 := []svcsdktypes.MetricStreamFilter{}
		for _, f2iter := range r.ko.Spec.IncludeFilters {
			f2elem := &svcsdktypes.MetricStreamFilter{}
			if f2iter.MetricNames != nil {
				f2elem.MetricNames = aws.ToStringSlice(f2iter.MetricNames)
			}
			if f2iter.Namespace != nil {
				f2elem.Namespace = f2iter.Namespace
			}
			f2 = append(f2, *f2elem)
		}
		res.IncludeFilters = f2
	}
	if r.ko.Spec.IncludeLinkedAccountsMetrics != nil {
		res.IncludeLinkedAccountsMetrics = r.ko.Spec.IncludeLinkedAccountsMetrics
	}
	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}
	if r.ko.Spec.OutputFormat != nil {
		res.OutputFormat = svcsdktypes.MetricStreamOutputFormat(*r.ko.Spec.OutputFormat)
	}
	if r.ko.Spec.RoleARN != nil {
		res.RoleArn = r.ko.Spec.RoleARN
	}
	if r.ko.Spec.StatisticsConfigurations != nil {
		f7 := []svcsdktypes.MetricStreamStatisticsConfiguration{}
		for _, f7iter := range r.ko.Spec.StatisticsConfigurations {
			f7elem := &svcsdktypes.MetricStreamStatisticsConfiguration{}
			if f7iter.AdditionalStatistics != nil {
				f7elem.AdditionalStatistics = aws.ToStringSlice(f7iter.AdditionalStatistics)
			}
			if f7iter.IncludeMetrics != nil {
				f7elemf1 := []svcsdktypes.MetricStreamStatisticsMetric{}
				for _, f7elemf1iter := range f7iter.IncludeMetrics {
					f7elemf1elem := &svcsdktypes.MetricStreamStatisticsMetric{}
					if f7elemf1iter.MetricName != nil {
						f7elemf1elem.MetricName = f7elemf1iter.MetricName
					}
					if f7elemf1iter.Namespace != nil {
						f7elemf1elem.Namespace = f7elemf1iter.Namespace
					}
					f7elemf1 = append(f7elemf1, *f7elemf1elem)
				}
				f7elem.IncludeMetrics = f7elemf1
			}
			f7 = append(f7, *f7elem)
		}
		res.StatisticsConfigurations = f7
	}
	if r.ko.Spec.Tags != nil {
		f8 := []svcsdktypes.Tag{}
		for _, f8iter := range r.ko.Spec.Tags {
			f8elem := &svcsdktypes.Tag{}
			if f8iter.Key != nil {
				f8elem.Key = f8iter.Key
			}
			if f8iter.Value != nil {
				f8elem.Value = f8iter.Value
			}
			f8 = append(f8, *f8elem)
		}
		res.Tags = f8
	}

	return res, nil
}

// sdkDelete deletes the supplied resource in the backend AWS service API
func (rm *resourceManager) sdkDelete(
	ctx context.Context,
	r *resource,
) (latest *resource, err error) {
	rlog := ackrtlog.FromContext(ctx)
	exit := rlog.Trace("rm.sdkDelete")
	defer func() {
		exit(err)
	}()
	input, err := rm.newDeleteRequestPayload(r)
	if err != nil {
		return nil, err
	}
	var resp *svcsdk.DeleteMetricStreamOutput
	_ = resp
	resp, err = rm.sdkapi.DeleteMetricStream(ctx, input)
	rm.metrics.RecordAPICall("DELETE", "DeleteMetricStream", err)
	return nil, err
}

// newDeleteRequestPayload returns an SDK-specific struct for the HTTP request
// payload of the Delete API call for the resource
func (rm *resourceManager) newDeleteRequestPayload(
	r *resource,
) (*svcsdk.DeleteMetricStreamInput, error) {
	res := &svcsdk.DeleteMetricStreamInput{}

	if r.ko.Spec.Name != nil {
		res.Name = r.ko.Spec.Name
	}

	return res, nil
}

// setStatusDefaults sets default properties into supplied custom resource
func (rm *resourceManager) setStatusDefaults(
	ko *svcapitypes.MetricStream,
) {
	if ko.Status.ACKResourceMetadata == nil {
		ko.Status.ACKResourceMetadata = &ackv1alpha1.ResourceMetadata{}
	}
	if ko.Status.ACKResourceMetadata.Region == nil {
		ko.Status.ACKResourceMetadata.Region = &rm.awsRegion
	}
	if ko.Status.ACKResourceMetadata.OwnerAccountID == nil {
		ko.Status.ACKResourceMetadata.OwnerAccountID = &rm.awsAccountID
	}
	if ko.Status.Conditions == nil {
		ko.Status.Conditions = []*ackv1alpha1.Condition{}
	}
}

// updateConditions returns updated resource, true; if conditions were updated
// else it returns nil, false
func (rm *resourceManager) updateConditions(
	r *resource,
	onSuccess bool,
	err error,
) (*resource, bool) {
	ko := r.ko.DeepCopy()
	rm.setStatusDefaults(ko)

	// Terminal condition
	var terminalCondition *ackv1alpha1.Condition = nil
	var recoverableCondition *ackv1alpha1.Condition = nil
	var syncCondition *ackv1alpha1.Condition = nil
	for _, condition := range ko.Status.Conditions {
		if condition.Type == ackv1alpha1.ConditionTypeTerminal {
			terminalCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeRecoverable {
			recoverableCondition = condition
		}
		if condition.Type == ackv1alpha1.ConditionTypeResourceSynced {
			syncCondition = condition
		}
	}
	var termError *ackerr.TerminalError
	if rm.terminalAWSError(err) || err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
		if terminalCondition == nil {
			terminalCondition = &ackv1alpha1.Condition{
				Type: ackv1alpha1.ConditionTypeTerminal,
			}
			ko.Status.Conditions = append(ko.Status.Conditions, terminalCondition)
		}
		var errorMessage = ""
		if err == ackerr.SecretTypeNotSupported || err == ackerr.SecretNotFound || errors.As(err, &termError) {
			errorMessage = err.Error()
		} else {
			awsErr, _ := ackerr.AWSError(err)
			errorMessage = awsErr.Error()
		}
		terminalCondition.Status = corev1.ConditionTrue
		terminalCondition.Message = &errorMessage
	} else {
		// Clear the terminal condition if no longer present
		if terminalCondition != nil {
			terminalCondition.Status = corev1.ConditionFalse
			terminalCondition.Message = nil
		}
		// Handling Recoverable Conditions
		if err != nil {
			if recoverableCondition == nil {
				// Add a new Condition containing a non-terminal error
				recoverableCondition = &ackv1alpha1.Condition{
					Type: ackv1alpha1.ConditionTypeRecoverable,
				}
				ko.Status.Conditions = append(ko.Status.Conditions, recoverableCondition)
			}
			recoverableCondition.Status = corev1.ConditionTrue
			awsErr, _ := ackerr.AWSError(err)
			errorMessage := err.Error()
			if awsErr != nil {
				errorMessage = awsErr.Error()
			}
			recoverableCondition.Message = &errorMessage
		} else if recoverableCondition != nil {
			recoverableCondition.Status = corev1.ConditionFalse
			recoverableCondition.Message = nil
		}
	}
	// Required to avoid the "declared but not used" error in the default case
	_ = syncCondition
	if terminalCondition != nil || recoverableCondition != nil || syncCondition != nil {
		return &resource{ko}, true // updated
	}
	return nil, false // not updated
}

// terminalAWSError returns awserr, true; if the supplied error is an aws Error type
// and if the exception indicates that it is a Terminal exception
// 'Terminal' exception are specified in generator configuration
func (rm *resourceManager) terminalAWSError(err error) bool {
	// No terminal_errors specified for this resource in generator config
	return false
}
