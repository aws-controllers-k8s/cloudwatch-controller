// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package metric_alarm

import (
	"bytes"
	"reflect"

	ackcompare "github.com/aws-controllers-k8s/runtime/pkg/compare"
	acktags "github.com/aws-controllers-k8s/runtime/pkg/tags"
)

// Hack to avoid import errors during build...
var (
	_ = &bytes.Buffer{}
	_ = &reflect.Method{}
	_ = &acktags.Tags{}
)

// newResourceDelta returns a new `ackcompare.Delta` used to compare two
// resources
func newResourceDelta(
	a *resource,
	b *resource,
) *ackcompare.Delta {
	delta := ackcompare.NewDelta()
	if (a == nil && b != nil) ||
		(a != nil && b == nil) {
		delta.Add("", a, b)
		return delta
	}

	if ackcompare.HasNilDifference(a.ko.Spec.ActionsEnabled, b.ko.Spec.ActionsEnabled) {
		delta.Add("Spec.ActionsEnabled", a.ko.Spec.ActionsEnabled, b.ko.Spec.ActionsEnabled)
	} else if a.ko.Spec.ActionsEnabled != nil && b.ko.Spec.ActionsEnabled != nil {
		if *a.ko.Spec.ActionsEnabled != *b.ko.Spec.ActionsEnabled {
			delta.Add("Spec.ActionsEnabled", a.ko.Spec.ActionsEnabled, b.ko.Spec.ActionsEnabled)
		}
	}
	if !ackcompare.SliceStringPEqual(a.ko.Spec.AlarmActions, b.ko.Spec.AlarmActions) {
		delta.Add("Spec.AlarmActions", a.ko.Spec.AlarmActions, b.ko.Spec.AlarmActions)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.AlarmDescription, b.ko.Spec.AlarmDescription) {
		delta.Add("Spec.AlarmDescription", a.ko.Spec.AlarmDescription, b.ko.Spec.AlarmDescription)
	} else if a.ko.Spec.AlarmDescription != nil && b.ko.Spec.AlarmDescription != nil {
		if *a.ko.Spec.AlarmDescription != *b.ko.Spec.AlarmDescription {
			delta.Add("Spec.AlarmDescription", a.ko.Spec.AlarmDescription, b.ko.Spec.AlarmDescription)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ComparisonOperator, b.ko.Spec.ComparisonOperator) {
		delta.Add("Spec.ComparisonOperator", a.ko.Spec.ComparisonOperator, b.ko.Spec.ComparisonOperator)
	} else if a.ko.Spec.ComparisonOperator != nil && b.ko.Spec.ComparisonOperator != nil {
		if *a.ko.Spec.ComparisonOperator != *b.ko.Spec.ComparisonOperator {
			delta.Add("Spec.ComparisonOperator", a.ko.Spec.ComparisonOperator, b.ko.Spec.ComparisonOperator)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.DatapointsToAlarm, b.ko.Spec.DatapointsToAlarm) {
		delta.Add("Spec.DatapointsToAlarm", a.ko.Spec.DatapointsToAlarm, b.ko.Spec.DatapointsToAlarm)
	} else if a.ko.Spec.DatapointsToAlarm != nil && b.ko.Spec.DatapointsToAlarm != nil {
		if *a.ko.Spec.DatapointsToAlarm != *b.ko.Spec.DatapointsToAlarm {
			delta.Add("Spec.DatapointsToAlarm", a.ko.Spec.DatapointsToAlarm, b.ko.Spec.DatapointsToAlarm)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.Dimensions, b.ko.Spec.Dimensions) {
		delta.Add("Spec.Dimensions", a.ko.Spec.Dimensions, b.ko.Spec.Dimensions)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EvaluateLowSampleCountPercentile, b.ko.Spec.EvaluateLowSampleCountPercentile) {
		delta.Add("Spec.EvaluateLowSampleCountPercentile", a.ko.Spec.EvaluateLowSampleCountPercentile, b.ko.Spec.EvaluateLowSampleCountPercentile)
	} else if a.ko.Spec.EvaluateLowSampleCountPercentile != nil && b.ko.Spec.EvaluateLowSampleCountPercentile != nil {
		if *a.ko.Spec.EvaluateLowSampleCountPercentile != *b.ko.Spec.EvaluateLowSampleCountPercentile {
			delta.Add("Spec.EvaluateLowSampleCountPercentile", a.ko.Spec.EvaluateLowSampleCountPercentile, b.ko.Spec.EvaluateLowSampleCountPercentile)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.EvaluationPeriods, b.ko.Spec.EvaluationPeriods) {
		delta.Add("Spec.EvaluationPeriods", a.ko.Spec.EvaluationPeriods, b.ko.Spec.EvaluationPeriods)
	} else if a.ko.Spec.EvaluationPeriods != nil && b.ko.Spec.EvaluationPeriods != nil {
		if *a.ko.Spec.EvaluationPeriods != *b.ko.Spec.EvaluationPeriods {
			delta.Add("Spec.EvaluationPeriods", a.ko.Spec.EvaluationPeriods, b.ko.Spec.EvaluationPeriods)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ExtendedStatistic, b.ko.Spec.ExtendedStatistic) {
		delta.Add("Spec.ExtendedStatistic", a.ko.Spec.ExtendedStatistic, b.ko.Spec.ExtendedStatistic)
	} else if a.ko.Spec.ExtendedStatistic != nil && b.ko.Spec.ExtendedStatistic != nil {
		if *a.ko.Spec.ExtendedStatistic != *b.ko.Spec.ExtendedStatistic {
			delta.Add("Spec.ExtendedStatistic", a.ko.Spec.ExtendedStatistic, b.ko.Spec.ExtendedStatistic)
		}
	}
	if !ackcompare.SliceStringPEqual(a.ko.Spec.InsufficientDataActions, b.ko.Spec.InsufficientDataActions) {
		delta.Add("Spec.InsufficientDataActions", a.ko.Spec.InsufficientDataActions, b.ko.Spec.InsufficientDataActions)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.MetricName, b.ko.Spec.MetricName) {
		delta.Add("Spec.MetricName", a.ko.Spec.MetricName, b.ko.Spec.MetricName)
	} else if a.ko.Spec.MetricName != nil && b.ko.Spec.MetricName != nil {
		if *a.ko.Spec.MetricName != *b.ko.Spec.MetricName {
			delta.Add("Spec.MetricName", a.ko.Spec.MetricName, b.ko.Spec.MetricName)
		}
	}
	if !reflect.DeepEqual(a.ko.Spec.Metrics, b.ko.Spec.Metrics) {
		delta.Add("Spec.Metrics", a.ko.Spec.Metrics, b.ko.Spec.Metrics)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Name, b.ko.Spec.Name) {
		delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
	} else if a.ko.Spec.Name != nil && b.ko.Spec.Name != nil {
		if *a.ko.Spec.Name != *b.ko.Spec.Name {
			delta.Add("Spec.Name", a.ko.Spec.Name, b.ko.Spec.Name)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Namespace, b.ko.Spec.Namespace) {
		delta.Add("Spec.Namespace", a.ko.Spec.Namespace, b.ko.Spec.Namespace)
	} else if a.ko.Spec.Namespace != nil && b.ko.Spec.Namespace != nil {
		if *a.ko.Spec.Namespace != *b.ko.Spec.Namespace {
			delta.Add("Spec.Namespace", a.ko.Spec.Namespace, b.ko.Spec.Namespace)
		}
	}
	if !ackcompare.SliceStringPEqual(a.ko.Spec.OKActions, b.ko.Spec.OKActions) {
		delta.Add("Spec.OKActions", a.ko.Spec.OKActions, b.ko.Spec.OKActions)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Period, b.ko.Spec.Period) {
		delta.Add("Spec.Period", a.ko.Spec.Period, b.ko.Spec.Period)
	} else if a.ko.Spec.Period != nil && b.ko.Spec.Period != nil {
		if *a.ko.Spec.Period != *b.ko.Spec.Period {
			delta.Add("Spec.Period", a.ko.Spec.Period, b.ko.Spec.Period)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Statistic, b.ko.Spec.Statistic) {
		delta.Add("Spec.Statistic", a.ko.Spec.Statistic, b.ko.Spec.Statistic)
	} else if a.ko.Spec.Statistic != nil && b.ko.Spec.Statistic != nil {
		if *a.ko.Spec.Statistic != *b.ko.Spec.Statistic {
			delta.Add("Spec.Statistic", a.ko.Spec.Statistic, b.ko.Spec.Statistic)
		}
	}
	if !ackcompare.MapStringStringEqual(ToACKTags(a.ko.Spec.Tags), ToACKTags(b.ko.Spec.Tags)) {
		delta.Add("Spec.Tags", a.ko.Spec.Tags, b.ko.Spec.Tags)
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Threshold, b.ko.Spec.Threshold) {
		delta.Add("Spec.Threshold", a.ko.Spec.Threshold, b.ko.Spec.Threshold)
	} else if a.ko.Spec.Threshold != nil && b.ko.Spec.Threshold != nil {
		if *a.ko.Spec.Threshold != *b.ko.Spec.Threshold {
			delta.Add("Spec.Threshold", a.ko.Spec.Threshold, b.ko.Spec.Threshold)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.ThresholdMetricID, b.ko.Spec.ThresholdMetricID) {
		delta.Add("Spec.ThresholdMetricID", a.ko.Spec.ThresholdMetricID, b.ko.Spec.ThresholdMetricID)
	} else if a.ko.Spec.ThresholdMetricID != nil && b.ko.Spec.ThresholdMetricID != nil {
		if *a.ko.Spec.ThresholdMetricID != *b.ko.Spec.ThresholdMetricID {
			delta.Add("Spec.ThresholdMetricID", a.ko.Spec.ThresholdMetricID, b.ko.Spec.ThresholdMetricID)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.TreatMissingData, b.ko.Spec.TreatMissingData) {
		delta.Add("Spec.TreatMissingData", a.ko.Spec.TreatMissingData, b.ko.Spec.TreatMissingData)
	} else if a.ko.Spec.TreatMissingData != nil && b.ko.Spec.TreatMissingData != nil {
		if *a.ko.Spec.TreatMissingData != *b.ko.Spec.TreatMissingData {
			delta.Add("Spec.TreatMissingData", a.ko.Spec.TreatMissingData, b.ko.Spec.TreatMissingData)
		}
	}
	if ackcompare.HasNilDifference(a.ko.Spec.Unit, b.ko.Spec.Unit) {
		delta.Add("Spec.Unit", a.ko.Spec.Unit, b.ko.Spec.Unit)
	} else if a.ko.Spec.Unit != nil && b.ko.Spec.Unit != nil {
		if *a.ko.Spec.Unit != *b.ko.Spec.Unit {
			delta.Add("Spec.Unit", a.ko.Spec.Unit, b.ko.Spec.Unit)
		}
	}

	return delta
}
